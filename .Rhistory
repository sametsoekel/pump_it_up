, learning_rate = 0.1
, categorical_feature = catnames
)
pred <- predict(lgbmodel,as.matrix(lgbtestx),reshape = T)
tahmin <- pred %>% data.frame()
preds <- apply(tahmin,1,myf)-1
preds <- as.factor(preds)
obstest <- lgbtesty %>% as.factor()
confusionMatrix(preds,obstest)
boktanimpute <- read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings="NA,", stringsAsFactors=TRUE)
View(boktanimpute)
boktanimpute <- read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings=c("NA",""), stringsAsFactors=TRUE)
anyNA(boktanimpute)
numerizedmain <- boktanimpute
val <- unique(numerizedmain$funder[!is.na(numerizedmain$funder)])
mode <- val[which.max(tabulate(match(numerizedmain$funder, val)))]
numerizedmain$funder <- ifelse(is.na(numerizedmain$funder),mode,numerizedmain$funder)
val <- unique(numerizedmain$installer[!is.na(numerizedmain$installer)])
mode <- val[which.max(tabulate(match(numerizedmain$installer, val)))]
numerizedmain$installer <- ifelse(is.na(numerizedmain$installer),mode,numerizedmain$installer)
val <- unique(numerizedmain$subvillage[!is.na(numerizedmain$subvillage)])
mode <- val[which.max(tabulate(match(numerizedmain$subvillage, val)))]
numerizedmain$subvillage <- ifelse(is.na(numerizedmain$subvillage),mode,numerizedmain$subvillage)
val <- unique(numerizedmain$public_meeting[!is.na(numerizedmain$public_meeting)])
mode <- val[which.max(tabulate(match(numerizedmain$public_meeting, val)))]
numerizedmain$public_meeting <- ifelse(is.na(numerizedmain$public_meeting),mode,numerizedmain$public_meeting)
val <- unique(numerizedmain$scheme_management[!is.na(numerizedmain$scheme_management)])
mode <- val[which.max(tabulate(match(numerizedmain$scheme_management, val)))]
numerizedmain$scheme_management <- ifelse(is.na(numerizedmain$scheme_management),mode,numerizedmain$scheme_management)
val <- unique(numerizedmain$permit[!is.na(numerizedmain$permit)])
mode <- val[which.max(tabulate(match(numerizedmain$permit, val)))]
numerizedmain$permit <- ifelse(is.na(numerizedmain$permit),mode,numerizedmain$permit)
anyNA(numerizedmain)
plasteR::na.outline(numerizedmain)
boktanimpute <- read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings=c("NA",""), stringsAsFactors=TRUE)
boktanimpute <- boktanimpute %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
numerizedmain <- boktanimpute
############ imputing funder
val <- unique(numerizedmain$funder[!is.na(numerizedmain$funder)])
mode <- val[which.max(tabulate(match(numerizedmain$funder, val)))]
### funder en sık tekrar eden 251
numerizedmain$funder <- ifelse(is.na(numerizedmain$funder),mode,numerizedmain$funder)
############ imputing installer
val <- unique(numerizedmain$installer[!is.na(numerizedmain$installer)])
mode <- val[which.max(tabulate(match(numerizedmain$installer, val)))]
### installer en sık tekrar eden 248
numerizedmain$installer <- ifelse(is.na(numerizedmain$installer),mode,numerizedmain$installer)
############ imputing subvillage
val <- unique(numerizedmain$subvillage[!is.na(numerizedmain$subvillage)])
mode <- val[which.max(tabulate(match(numerizedmain$subvillage, val)))]
### installer en sık tekrar eden 7716
numerizedmain$subvillage <- ifelse(is.na(numerizedmain$subvillage),mode,numerizedmain$subvillage)
############ imputing public_meeting
val <- unique(numerizedmain$public_meeting[!is.na(numerizedmain$public_meeting)])
mode <- val[which.max(tabulate(match(numerizedmain$public_meeting, val)))]
### public_meeting en sık tekrar eden 2
numerizedmain$public_meeting <- ifelse(is.na(numerizedmain$public_meeting),mode,numerizedmain$public_meeting)
############ imputing scheme_management
val <- unique(numerizedmain$scheme_management[!is.na(numerizedmain$scheme_management)])
mode <- val[which.max(tabulate(match(numerizedmain$scheme_management, val)))]
### scheme management en sık tekrar eden 7
numerizedmain$scheme_management <- ifelse(is.na(numerizedmain$scheme_management),mode,numerizedmain$scheme_management)
########### imputing permit
val <- unique(numerizedmain$permit[!is.na(numerizedmain$permit)])
mode <- val[which.max(tabulate(match(numerizedmain$permit, val)))]
### permit en sık tekrar eden 2
numerizedmain$permit <- ifelse(is.na(numerizedmain$permit),mode,numerizedmain$permit)
anyNA(numerizedmain)
boktanpred <- predict(lgbmodel,as.matrix(numerizedmain),reshape = T)
preds <- boktanpred %>% data.frame()
preds <- apply(tahmin,1,myf)-1
preds <- as.factor(preds)
textpred <- ifelse(preds==0,"functional",
ifelse(preds==1,"functional needs repair","non functional"))
preds <- boktanpred %>% data.frame()
preds <- apply(preds,1,myf)-1
preds <- as.factor(preds)
textpred <- ifelse(preds==0,"functional",
ifelse(preds==1,"functional needs repair","non functional"))
SubmissionFormat$status_group<-textpred
write_csv(SubmissionFormat,"2.2nd_submission.csv")
numerizedmain %>% View()
numerizedmain$construction_year <- ifelse(is.na(numerizedmain$construction_year),2010,numerizedmain$construction_year)
summary(numerizedmain$construction_year)
numerizedmain$construction_year <- ifelse(numerizedmain$construction_year==0,2010,numerizedmain$construction_year)
summary(numerizedmain$construction_year)
boktanpred <- predict(lgbmodel,as.matrix(numerizedmain),reshape = T)
preds <- boktanpred %>% data.frame()
preds <- apply(preds,1,myf)-1
preds <- as.factor(preds)
textpred <- ifelse(preds==0,"functional",
ifelse(preds==1,"functional needs repair","non functional"))
SubmissionFormat$status_group<-textpred
write_csv(SubmissionFormat,"2.3nd_submission.csv")
PredictiveImputedNoMode50k <- read.csv("~/Desktop/pump_it_up/Imputed Train Set/PredictiveImputedNoMode50k.csv", stringsAsFactors=TRUE)
View(PredictiveImputedNoMode50k)
df <- read.csv("~/Desktop/pump_it_up/Imputed Train Set/PredictiveImputedNoMode50k.csv", stringsAsFactors=TRUE)
View(df)
df_num <- as.data.frame(lapply(df, as.numeric))
View(df_num)
View(df)
scaler <- function(x){(x-min(x))/(max(x)-min(x))}
df_num$construction_year
df_num$trgt
df_num$trgt <- as.factor(df_num$trgt)
df_num$trgt
full_scaled <- full_num %>% select(-"id") %>% apply(2,scaler) %>% data.frame() %>% cbind(id =full_num$id)
library(dplyr)
x_scaled <- full_num %>% select(-c("id","trgt")) %>% apply(2,scaler) %>% data.frame()
x_scaled <- df_num %>% select(-c("id","trgt")) %>% apply(2,scaler) %>% data.frame()
y <- df_num$trgt
length(y)
df <- read.csv("~/Desktop/pump_it_up/Imputed Train Set/PredictiveImputedNoMode50k.csv", stringsAsFactors=TRUE)
scaler <- function(x){(x-min(x))/(max(x)-min(x))}
df_num <- as.data.frame(lapply(df, as.numeric))
df_num$trgt <- as.factor(df_num$trgt)
scaled <- df_num %>% select(-c("id","trgt")) %>% apply(2,scaler) %>% data.frame() %>% cbind(df_num$trgt)
View(scaled)
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
index <- sample(1:nrow(scaled))
train_index <- index[1:35000]
trainset <- scaled[train_index,]
testset <- scaled[!train_index,]
testset <- scaled[-train_index,]
train_x <- trainset %>% select(-"trgt")
scaled <- df_num %>% select(-c("id","trgt")) %>% apply(2,scaler) %>% data.frame() %>% cbind(status_group=df_num$trgt)
df <- read.csv("~/Desktop/pump_it_up/Imputed Train Set/PredictiveImputedNoMode50k.csv", stringsAsFactors=TRUE)
scaler <- function(x){(x-min(x))/(max(x)-min(x))}
df_num <- as.data.frame(lapply(df, as.numeric))
## 1 functional 3 non funtional 2 functional needs repair
df_num$trgt <- as.factor(df_num$trgt)
scaled <- df_num %>% select(-c("id","trgt")) %>% apply(2,scaler) %>% data.frame() %>% cbind(status_group=df_num$trgt)
trainset <- scaled[train_index,]
testset <- scaled[-train_index,]
train_x <- trainset %>% select(-"trgt")
train_x <- trainset %>% select(-"status_group")
train_y <- trainset$status_group
test_x <- testset %>% select(-"status_group")
test_y <- testset$status_group
View(test_x)
library(nnet, lib.loc = "/usr/lib/R/library")
nnet1 <- nnet(status_group~.,data=trainset,
size=18,decay=0.01)
pred <- predict(nnet1,train_x,type="class")
pred <- predict(nnet1,train_x,type="class") %>% as.factor()
summary(pred)
obs <- train_y
hata <- data.frame(pred,obs)
library(caret)
defaultSummary(hata)
pred <- predict(nnet1,test_x,type="class") %>% as.factor()
obs <- test_y
hata <- data.frame(pred,obs)
defaultSummary(hata)
nnet1 <- nnet(status_group~.,data=trainset,
size=18,decay=0.037,maxit=692)
pred <- predict(nnet1,test_x,type="class") %>% as.factor()
pred <- predict(nnet1,test_x,type="class") %>% as.factor()
obs <- test_y
hata <- data.frame(pred,obs)
defaultSummary(hata)
nnet1$n
nnet1$nconn
nnet1$decay
nnet1$coefnames
nnet1$xlevels
nnet1$nsunits
nnet1$entropy
nnet1$value
nnet1$residuals
nnet1 <- nnet(status_group~.,data=trainset,
size=18,decay=0.37,maxit=69)
pred <- predict(nnet1,test_x,type="class") %>% as.factor()
obs <- test_y
hata <- data.frame(pred,obs)
defaultSummary(hata)
pred <- predict(nnet1,train_x,type="class") %>% as.factor()
obs <- train_y
hata <- data.frame(pred,obs)
defaultSummary(hata)
nnet1 <- nnet(status_group~.,data=trainset,
size=20,decay=0.37,maxit=697)
pred <- predict(nnet1,train_x,type="class") %>% as.factor()
obs <- train_y
hata <- data.frame(pred,obs)
defaultSummary(hata)
pred <- predict(nnet1,test_x,type="class") %>% as.factor()
obs <- test_y
hata <- data.frame(pred,obs)
defaultSummary(hata)
SubmissionFormat <- read.csv("~/Desktop/pump_it_up/SubmissionFormat.csv")
View(SubmissionFormat)
targetsub <- read.csv("~/Desktop/pump_it_up/Imputed Submission Var./fullsubmission.csv", stringsAsFactors=TRUE)
View(targetsub)
View(SubmissionFormat)
sub_num <- as.data.frame(lapply(targetsub, as.numeric))
View(sub_num)
sub_num$trgt <- as.factor(sub_num$trgt)
subnum_scaled <- sub_num %>% select(-c("id")) %>% apply(2,scaler) %>% data.frame()
View(subnum_scaled)
submission5pred <- predict(nnet1,subnum_scaled,type="class")
textpred <- ifelse(submission5pred==1,"functional",
ifelse(submission5pred==2,"functional needs repair","non functional"))
SubmissionFormat
SubmissionFormat$status_group <- textpred
View(SubmissionFormat)
library(readr)
write_csv(SubmissionFormat,"5thSubByNnet.csv")
library(lightgbm)
dtrain <- lgb.Dataset(as.matrix(train_x),label=train_y)
dtest <- lgb.Dataset(as.matrix(test_x),label=test_y)
valids <- list(test = dtest)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
df_num$trgt
df_num$trgt-1
df_num$trgt
as.numeric(df_num$trgt)-1
df_num$trgt <- as.numeric(df_num$trgt)-1
df_num$trgt
df_num$trgt %>% as.factor()
df_num$trgt %>% as.factor(df_num$trgt)
df_num$trgt <- as.factor(df_num$trgt)
df_num$trgt
trainset <- df_num[train_index,]
testset <- df_num[-train_index,]
train_x <- trainset %>% select(-"trgt")
train_x <- trainset %>% select(-"trgt")
View(train_x)
train_x <- trainset %>% select(-c("trgt","id"))
train_y <- trainset$trgt
length(train_y)
test_x <- testset %>% select(-c("trgt","id"))
test_y <- testset$status_group
test_y <- testset$trgt
dtrain <- lgb.Dataset(as.matrix(train_x),label=train_y)
dtest <- lgb.Dataset(as.matrix(test_x),label=test_y)
valids <- list(test = dtest)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
train_y
test_y
valids <- list(test = dtest)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, categorical_feature = "trgt"
)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, categorical_feature = "trgt"
)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3,categorical_feature = "trgt")
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=4)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
summary(train_y)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=4)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
lgbmodel$best_iter
lgbmodel$eval()
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
dtrain <- lgb.Dataset(as.matrix(train_x),label=trainset$trgt)
dtest <- lgb.Dataset(as.matrix(test_x),label=testset$trgt)
valids <- list(test = dtest)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
)
summary(train_y)
summary(test_y)
trainset <- df[train_index,]
testset <- df[-train_index,]
View(trainset)
catnames <- full %>% purrr::keep(is.factor) %>% names()
catnames <- df %>% purrr::keep(is.factor) %>% names()
train_x <- trainset %>% select(-c("trgt","id"))
train_y <- trainset$trgt
test_x <- testset %>% select(-c("trgt","id"))
test_y <- testset$trgt
dtrain <- lgb.Dataset(as.matrix(train_x),label=trainset$trgt)
dtest <- lgb.Dataset(as.matrix(test_x),label=testset$trgt)
valids <- list(test = dtest)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, categorical_feature = catnames
)
trainset <- df_num[train_index,]
testset <- df_num[-train_index,]
train_x <- trainset %>% select(-c("trgt","id"))
train_y <- trainset$trgt
test_x <- testset %>% select(-c("trgt","id"))
test_y <- testset$trgt
View(train_x)
test_y <- testset$trgt %>% as.numeric()
test_y
test_y <- test_y-1
test_y
train_y <- trainset$trgt %>% as.numeric()
train_y <- train_y-1
dtrain <- lgb.Dataset(as.matrix(train_x),label=train_y)
dtest <- lgb.Dataset(as.matrix(test_x),label=test_y)
valids <- list(test = dtest)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, early_stopping_rounds = 20
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
myf <- function(x){
match(max(x),x)
}
predsss <- apply(tahmin,1,myf)-1
predsss <- as.factor(preds)
predsss <- as.factor(predsss)
data.frame(predsss,test_y) %>% View()
confusionMatrix(predsss,test_y) %>% View()
confusionMatrix(predsss,test_y)
confusionMatrix(predsss,as.factor(test_y))
predsss <- predict(lgbmodel,as.matrix(train_x),reshape = T)
tahmin <- predsss %>% data.frame()
myf <- function(x){
match(max(x),x)
}
predsss <- apply(tahmin,1,myf)-1
predsss <- as.factor(predsss)
confusionMatrix(predsss,as.factor(train_y))
df_num %>% View()
View(sub_num)
sub_num
nrow(sub_num)
sub_num %>% select(-"id")
x <-sub_num %>% select(-"id")
View(sub_num)
predsss <- predict(lgbmodel,as.matrix(x),reshape = T)
tahmin <- predsss %>% data.frame()
myf <- function(x){
match(max(x),x)
}
predsss <- apply(tahmin,1,myf)-1
predsss <- as.factor(predsss)
length(predsss)
textpred <- ifelse(preds==0,"functional",
ifelse(preds==1,"functional needs repair","non functional"))
textpred <- ifelse(predsss==0,"functional",
ifelse(predsss==1,"functional needs repair","non functional"))
View(SubmissionFormat)
textpred
SubmissionFormat$status_group <- textpred
SubmissionFormat$status_group <- textpred
write_csv(SubmissionFormat,"6thSubByLightGBM.csv")
library(lightgbm)
library(dplyr)
dtrain <- lgb.Dataset(as.matrix(train_x),label=train_y)
dtest <- lgb.Dataset(as.matrix(test_x),label=test_y)
valids <- list(test = dtest)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel2 <- lgb.train(
params = params
, data = dtrain
, nrounds = 3000
, min_data = 1L
, valids = valids
, learning_rate = 0.037
, early_stopping_rounds = 150
)
lgbmodel2$best_iter
lgbmodel2$best_score
preds2 <- predict(lgbmodel2,as.matrix(train_x),reshape = T)
save.image("~/Desktop/pump_it_up/R Scripts/18eyl1stsubmission.RData")
tahmin <- preds2 %>% data.frame()
View(tahmin)
preds2 <- apply(tahmin,1,myf)-1
preds2 <- as.factor(preds2)
confusionMatrix(preds2,as.factor(train_y))
library(caret)
confusionMatrix(preds2,as.factor(train_y))
preds3 <- predict(lgbmodel2,as.matrix(test_x),reshape = T)
tahmin2 <- preds3 %>% data.frame()
preds3 <- apply(tahmin2,1,myf)-1
preds3 <- as.factor(preds3)
confusionMatrix(preds3,as.factor(test_y))
predsub <- predict(lgbmodel2,as.matrix(x),reshape = T)
tahmin3 <- predsub %>% data.frame()
predsub <- apply(tahmin3,1,myf)-1
predsub <- as.factor(predsub)
length(predsss)
textpred <- ifelse(predsub==0,"functional",
ifelse(predsub==1,"functional needs repair","non functional"))
textpred
SubmissionFormat$status_group <- textpred
library(readr)
write_csv(SubmissionFormat,"7thSubmissionByLightGBM.csv")
save.image("~/Desktop/pump_it_up/R Scripts/18eyl1stsubmission.RData")
