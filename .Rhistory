year_train<-na.omit(year_train)
year_train_x <- year_train %>% select(-c("construction_year","population"))
year_train_y <- year_train$construction_year
year_target_x <- train_xx %>%
filter(is.na(construction_year))
year_target_x <- yearpredtarget %>% select(-c("construction_year","population"))
year_target_x <- na.omit(year_target_x)
train_x <- read.csv("Data/train_x.csv", na.strings=c("NA",""),stringsAsFactors = TRUE)
train_y <- read_csv("Data/train_y.csv")
###### SOME VARIABLES I FOUND INSIGNIFICANT GETS OUT -- 14/09/2020 #######
train_xx <- train_x %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
#plasteR::na.outline(train_xx) ### checked current missing values
#Freq(as.factor(train_xx$construction_year)) ### checked faulty frequencies
#### Filling zero dates with NA
train_xx$construction_year <- ifelse(train_xx$construction_year==0,NA,train_xx$construction_year)
year_train <- train_xx %>%
filter(!is.na(construction_year))
year_train<-na.omit(year_train)
year_train_x <- year_train %>% select(-c("construction_year","population"))
year_train_y <- year_train$construction_year
year_target_x <- train_xx %>%
filter(is.na(construction_year))
year_target_x <- year_target_x %>% select(-c("construction_year","population"))
year_target_x <- na.omit(year_target_x)
View(ypd_x)
train_x <- read.csv("Data/train_x.csv", na.strings=c("NA",""),stringsAsFactors = TRUE)
train_y <- read_csv("Data/train_y.csv")
###### SOME VARIABLES I FOUND INSIGNIFICANT GETS OUT -- 14/09/2020 #######
train_xx <- train_x %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
#plasteR::na.outline(train_xx) ### checked current missing values
#Freq(as.factor(train_xx$construction_year)) ### checked faulty frequencies
#### Filling zero dates with NA
train_xx$construction_year <- ifelse(train_xx$construction_year==0,NA,train_xx$construction_year)
year_train <- train_xx %>%
filter(!is.na(construction_year))
year_train<-na.omit(year_train)
year_train_x <- year_train %>% select(-c("construction_year","population"))
year_train_y <- year_train$construction_year
year_target_x <- train_xx %>%
filter(is.na(construction_year))
year_target_x <- year_target_x %>% select(-c("construction_year","population"))
year_target_x <- na.omit(year_target_x)
year_train
library(xgboost)
xgb.DMatrix(year_target_x)
xgb.DMatrix(as.matrix(year_target_x))
as.numeric(year_target_x)
PKG_URL <- "https://github.com/microsoft/LightGBM/releases/download/v3.0.0/lightgbm-3.0.0-r-cran.tar.gz"
remotes::install_url(PKG_URL)
library(lightgbm)
dtrain <- lgb.Dataset(year_train_x,label=year_train_y)
View(dtrain)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(year_train_x,label=year_train_y)
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(data_file)
keep(year_train_x,is.factor)
library(purrr)
keep(year_train_x,is.factor)
names(keep(year_train_x,is.factor))
catvar <- names(keep(year_train_x,is.factor))
dtrain <- lgb.Dataset(year_train_x,label=year_train_y,
categorical_feature = catvar)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
as.matrix(year_train_x)
dtrain <- lgb.Dataset(as.matrix(year_train_x),label=year_train_y,
categorical_feature = catvar)
View(as.matrix(year_train_x))
anyNA(as.matrix(year_train_x))
dtrain <- lgb.Dataset(as.matrix(year_train_x),label=year_train_y,
categorical_feature = catvar)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(data_file)
View(dtrain)
lgb.Dataset.construct(dtrain)
View(dtrain)
train_index <- createDataPartition(year_train$construction_year,
p = .7,
list = F,
times = 1)
library(caret)
train_index <- createDataPartition(year_train$construction_year,
p = .7,
list = F,
times = 1)
train <- df[train_index,]
train <- year_train[train_index,]
test <- year_train[-train_index,]
train_y <- train$construction_year
train_x <- train %>% dplyr::select(-"construction_year")
test_y <- test$construction_year
test_x <- test %>% dplyr::select(-"construction_year")
train_x <- read.csv("Data/train_x.csv", na.strings=c("NA",""),stringsAsFactors = TRUE)
train_y <- read_csv("Data/train_y.csv")
###### SOME VARIABLES I FOUND INSIGNIFICANT GETS OUT -- 14/09/2020 #######
train_xx <- train_x %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
#plasteR::na.outline(train_xx) ### checked current missing values
#Freq(as.factor(train_xx$construction_year)) ### checked faulty frequencies
#### Filling zero dates with NA
train_xx$construction_year <- ifelse(train_xx$construction_year==0,NA,train_xx$construction_year)
year_train <- train_xx %>%
filter(!is.na(construction_year))
year_train<-na.omit(year_train)
year_target_x <- train_xx %>%
filter(is.na(construction_year)) %>% na.omit()
train_x <- read.csv("Data/train_x.csv", na.strings=c("NA",""),stringsAsFactors = TRUE)
train_y <- read_csv("Data/train_y.csv")
###### SOME VARIABLES I FOUND INSIGNIFICANT GETS OUT -- 14/09/2020 #######
train_xx <- train_x %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
#plasteR::na.outline(train_xx) ### checked current missing values
#Freq(as.factor(train_xx$construction_year)) ### checked faulty frequencies
#### Filling zero dates with NA
train_xx$construction_year <- ifelse(train_xx$construction_year==0,NA,train_xx$construction_year)
year_train <- train_xx %>%
filter(!is.na(construction_year))
year_train<-na.omit(year_train)
year_target_x <- train_xx %>%
filter(is.na(construction_year)) %>% na.omit()
train_y <- read_csv("Data/train_y.csv")
library(readr)
train_y <- read_csv("Data/train_y.csv")
train_xx <- train_x %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
library(dplyr)
train_xx <- train_x %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
train_xx$construction_year <- ifelse(train_xx$construction_year==0,NA,train_xx$construction_year)
year_train <- train_xx %>%
filter(!is.na(construction_year))
year_train<-na.omit(year_train)
year_target_x <- train_xx %>%
filter(is.na(construction_year)) %>% na.omit()
train_x <- read.csv("Data/train_x.csv", na.strings=c("NA",""),stringsAsFactors = TRUE)
train_y <- read_csv("Data/train_y.csv")
###### SOME VARIABLES I FOUND INSIGNIFICANT GETS OUT -- 14/09/2020 #######
train_xx <- train_x %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
#plasteR::na.outline(train_xx) ### checked current missing values
#Freq(as.factor(train_xx$construction_year)) ### checked faulty frequencies
#### Filling zero dates with NA
train_xx$construction_year <- ifelse(train_xx$construction_year==0,NA,train_xx$construction_year)
year_train <- train_xx %>%
filter(!is.na(construction_year))
year_train<-na.omit(year_train)
year_target <- train_xx %>%
filter(is.na(construction_year)) %>% na.omit() %>% select(-"construction_year")
train_x <- read.csv("Data/train_x.csv", na.strings=c("NA",""),stringsAsFactors = TRUE)
train_y <- read_csv("Data/train_y.csv")
###### SOME VARIABLES I FOUND INSIGNIFICANT GETS OUT -- 14/09/2020 #######
train_xx <- train_x %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
#plasteR::na.outline(train_xx) ### checked current missing values
#Freq(as.factor(train_xx$construction_year)) ### checked faulty frequencies
#### Filling zero dates with NA
train_xx$construction_year <- ifelse(train_xx$construction_year==0,NA,train_xx$construction_year)
year_train <- train_xx %>%
filter(!is.na(construction_year))
year_train<-na.omit(year_train)
year_target <- train_xx %>%
filter(is.na(construction_year)) %>%
select(-"construction_year") %>% na.omit()
train_index <- createDataPartition(year_train$construction_year,
p = .7,
list = F,
times = 1)
train <- year_train[train_index,]
test <- year_train[-train_index,]
train_y <- train$construction_year
train_x <- train %>% dplyr::select(-"construction_year")
test_y <- test$construction_year
test_x <- test %>% dplyr::select(-"construction_year")
catnames <- names(purrr::keep(train_x,is.factor))
dtrain <- lgb.Dataset(train_x, label = train_y)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(data_file)
lgb.Dataset.set.categorical(dtrain, catnames)
dtrain <- lgb.Dataset(as.matrix(train_x), label = train_y)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(data_file)
lgb.Dataset.set.categorical(dtrain, catnames)
dtrain
lightgbm(dtrain)
lgb.check.obj
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
rounds = 1000,
min_data = 1,
learning_rate = .1,
metric='RMSE')
lgb.Dataset.construct(dtrain)
dtrain <- lgb.Dataset(as.matrix(train_x), label = train_y)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(data_file)
lgb.Dataset.construct(dtrain)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
rounds = 1000,
min_data = 1,
learning_rate = .1,
metric='RMSE',
categorical_feature = catnames)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
min_data = 1,
learning_rate = .1,
metric='RMSE',
categorical_feature = catnames)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='RMSE',
categorical_feature = catnames)
dtrain <- lgb.Dataset(as.matrix(train_x), label = train_y,categorical_feature = catnames)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(data_file)
lgb.Dataset.construct(dtrain,free_)
lgb.Dataset.construct(dtrain)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='RMSE')
model$predict(test_x)
model$predict(as.matrix(test_x))
pred <- model$predict(as.matrix(test_x))
View(pred)
View(
cbind(pred,test_y)
)
hata <- data.frame(pred=pred,obs=test_y)
View(hata)
defaultSummary(hata)
lgb.save(model,tempfile(fileext = ".txt"))
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
lgb.save(model,tempfile(fileext = ".txt"))
saveRDS(model)
model_file<-lgb.save(model,tempfile(fileext = ".rds"))
saveRDS.lgb.Booster(model,model_file)
model_file<-tempfile(fileext = ".rds")
saveRDS.lgb.Booster(model,model_file)
getwd()
saveRDS.lgb.Booster(model,"modd")
saveRDS.lgb.Booster(model,"modd.rds")
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.5,
nrounds = 1500,
learning_rate = .01,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.01,
nrounds = 2000,
learning_rate = .01,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 500,
learning_rate = .01,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .3,
metric='l2')
defaultSummary(hata)
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.4,
nrounds = 1000,
learning_rate = .3,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .5,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.8,
nrounds = 1000,
learning_rate = .5,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.8,
nrounds = 1000,
learning_rate = .5,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.01,
nrounds = 1000,
learning_rate = .01,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
params <- list(objective="regression",metric="l2",learning_rate=c(0.01,0.05,0.1,0.15,0.2),
nrounds=c(100,150,200,250,500,750,1000,1500,2500),
alpha = c(0.01,0.1,0.5,0.75,1))
model <- lgb.cv(data=dtrain,
params = params)
model <- lgb.cv(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
pred <- model$predict(as.matrix(test_x))
model$boosters
model$boosters$
hata <- data.frame(pred=pred,obs=test_y)
View(model)
predict(model,test_x)
model$best_iter
model$best_score
model$boosters$``
model$boosters$hata
View(model)
model[["boosters"]][[3]][["booster"]]
model$boosters[[1]]
model$boosters[[1]]$booster
model$boosters[[1]]$booster$predict(test_x)
model$boosters[[1]]$booster$predict(as.matrix(test_x))
pred <- model$boosters[[1]]$booster$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
pred <- model$boosters[[2]]$booster$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
pred <- model$boosters[[1]]$booster$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
pred <- model$boosters[[3]]$booster$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
pred <- model$boosters[[1]]$booster$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
pred <- model$boosters[[2]]$booster$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model2 <- model$boosters[[2]]$booster
save(model2,file="model2.rds")
model2
model <- lgb.cv(data=dtrain,
objective = "classification",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
model <- lgb.cv(data=dtrain,
objective = "multiclass",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
dtrain <- lgb.Dataset(as.matrix(train_x), label = as.factor(train_y),categorical_feature = catnames)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(data_file)
lgb.Dataset.construct(dtrain)
model <- lgb.cv(data=dtrain,
objective = "multiclass",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
##### 8.6 yıl ortalama hata
as.factor(train_y)
model <- lgb.cv(data=dtrain,
objective = "multicldass",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
model <- lgb.cv(data=dtrain,
objective = "multiclassova",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
model <- lgb.cv(data=dtrain,
objective = "multiclassova",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1
)
model <- lgb.train(data=dtrain,
objective = "multiclass",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
dtrain <- lgb.Dataset(as.matrix(train_x), label = as.factor(train_y),categorical_feature = catnames)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(data_file)
lgb.Dataset.construct(dtrain)
model <- lgb.train(data=dtrain,
objective = "multiclass",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
names(train_y)
model <- lgb.train(data=dtrain,
objective = "s",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
dtrain <- lgb.Dataset(as.matrix(train_x), label = train_y,categorical_feature = catnames)
data_file <- tempfile(fileext = ".data")
lgb.Dataset.save(dtrain, data_file)
dtrain <- lgb.Dataset(data_file)
lgb.Dataset.construct(dtrain)
model <- lgb.train(data=dtrain,
objective = "regression",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
pred <- model$predict(as.matrix(test_x))
hata <- data.frame(pred=pred,obs=test_y)
defaultSummary(hata)
model <- lgb.train(data=dtrain,
objective = "multiclass",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1,
metric='l2')
model <- lgb.train(data=dtrain,
objective = "multiclass",
alpha = 0.1,
nrounds = 1000,
learning_rate = .1
)
