df <- read.csv("~/Desktop/pump_it_up/1st_merge.csv", stringsAsFactors=TRUE) %>% select(-"X")
df$status_group <- ((df$status_group %>% as.numeric()) -1) %>% as.factor()
set.seed(37)
partition_index <- sample(1:nrow(df),nrow(df))
partition_index <- sample(1:nrow(df),nrow(df))
partition_index <- sample(1:nrow(df),nrow(df))
partition_index <- sample(1:nrow(df),nrow(df))
partition_index <- sample(1:nrow(df),nrow(df))
partition_index <- sample(1:nrow(df),nrow(df))
partition_index <- sample(1:nrow(df),nrow(df))
partition_index <- sample(1:nrow(df),nrow(df))
partition_index <- sample(1:nrow(df),nrow(df))
seventyfivepercent <- nrow(df)*.75
train_index <- partition_index[1:seventyfivepercent]
train <- df[train_index,]
test <- df[-train_index,]
train_y <- train$status_group
train_x <- train %>% dplyr::select(-"status_group")
test_y <- test$status_group
test_x <- test %>% dplyr::select(-"status_group")
scaledtrain <- mutate_all(train, function(x) as.numeric(as.character(x)))
View(scaledtrain)
df$funder
df$funder %>% as.numeric()
library(purrr)
purrr::keep(train,is.factor)
factors <- purrr::keep(train,is.factor)
numerics <- purrr::keep(train,is.numeric)
glimpse(factors)
factors %>% as.numeric()
factors %>% mutate_all(as.numeric)
numerizedfactor <- factors %>% mutate_all(as.numeric)
View(numerizedfactor)
df <- read.csv("~/Desktop/pump_it_up/1st_merge.csv", stringsAsFactors=TRUE) %>% select(-"X")
df$status_group <- ((df$status_group %>% as.numeric()) -1) %>% as.factor()
set.seed(37)
partition_index <- sample(1:nrow(df),nrow(df))
seventyfivepercent <- nrow(df)*.75
train_index <- partition_index[1:seventyfivepercent]
train <- df[train_index,]
test <- df[-train_index,]
train_y <- train$status_group
train_x <- train %>% dplyr::select(-"status_group")
test_y <- test$status_group
test_x <- test %>% dplyr::select(-"status_group")
numerizer <- function(x) {
if(is.factor(x)){
return(as.character(x) %>% as.numeric())
}
else{
return(x)
}
}
numerizedtrain <- apply(train,2,numerizer)
numerizedtrain <- apply(train,2,numerizer) %>% data.frame()
View(numerizedtrain)
numerizer <- function(x) {
if(is.factor(x)){
return(as.character(x) %>% as.numeric())
}
else{
return(as.numeric(x))
}
}
numerizedtrain <- apply(train,2,numerizer) %>% data.frame()
numerizedtrain <- data.frame(apply(train, 2, function(x) as.numeric(as.character(x))))
numerizedtrain <- data.frame(apply(train, 2, function(x) as.numeric(as.character(as.factor(x)))))
View(numerizedtrain)
glimpse(df)
scaledtrain <- mutate_all(train, function(x) as.numeric(as.character(x)))
View(scaledtrain)
scaledtrain <- mutate_all(train, numerizer)
View(df)
View(scaledtrain)
factors <- purrr::keep(train,is.factor)
factors <- purrr::keep(train,is.factor) %>% as.numeric()
factors <- purrr::keep(train,is.factor) %>% as.character()
factors <- purrr::keep(train,is.factor) %>% as.character() %>% data.frame()
factors <- purrr::keep(train,is.factor) %>% as.character()
factors <- purrr::keep(train,is.factor) %>% as.numeric()
factors <- purrr::keep(train,is.factor)
glimpse(factors)
factors <- purrr::keep(train,is.factor) %>% apply(2,as.numeric) %>% data.frame()
View(factors)
factors$installer
factors <- purrr::keep(train,is.factor)
factors$installer
factors<-factors$installer %>% as.numeric()
summary(factors)
factors <- purrr::keep(train,is.factor)
factors <- purrr::keep(train,is.factor) %>% apply(2,as.numeric)
factors <- purrr::keep(train,is.factor) %>% apply(2,as.character)
View(factors)
factors <- purrr::keep(train,is.factor) %>% apply(2,as.character) %>% as.numeric()
factors <- purrr::keep(train,is.factor) %>% apply(2,as.character) %>% apply(2,as.numeric)
View(factors)
factors <- purrr::keep(train,is.factor)
factors$funder
factors$funder <- as.numeric(factors$funder)
View(factors)
View(train_x)
numerics <- purrr::keep(train,is.numeric())
numerics <- purrr::keep(train,is.numeric)
factors$installer <- as.numeric(factors$installer)
factors$basin <- as.numeric(factors$basin)
factors$subvillage <- as.numeric(factors$subvillage)
factors$region <- as.numeric(factors$region)
factors$lga <- as.numeric(factors$lga)
factors$ward <- as.numeric(factors$ward)
factors$public_meeting <- as.numeric(factors$public_meeting)
factors$scheme_management <- as.numeric(factors$scheme_management)
factors$permit <- as.numeric(factors$permit)
factors$extraction_type <- as.numeric(factors$extraction_type)
factors$extraction_type_group <- as.numeric(factors$extraction_type_group)
factors$extraction_type_class <- as.numeric(factors$extraction_type_class)
factors$management <- as.numeric(factors$management)
factors$management_group <- as.numeric(factors$management_group)
factors$payment <- as.numeric(factors$payment)
factors$payment_type <- as.numeric(factors$payment_type)
factors$water_quality <- as.numeric(factors$water_quality)
factors$quality_group <- as.numeric(factors$quality_group)
factors$quantity <- as.numeric(factors$quantity)
factors$source <- as.numeric(factors$source)
factors$source_type <- as.numeric(factors$source_type)
factors$source_class <- as.numeric(factors$source_class)
factors$waterpoint_type <- as.numeric(factors$waterpoint_type)
factors$waterpoint_type_group <- as.numeric(factors$waterpoint_type_group)
factors$status_group
factors$status_group <- as.numeric(factors$status_group)
factors$status_group
factors$waterpoint_type_group
factors$payment_type
factors$status_group <- as.numeric(factors$status_group)
numerizedtrain <- cbind(factors,numerics)
factors <- purrr::keep(train,is.factor)
numerics <- purrr::keep(train,is.numeric)
factors$funder <- as.numeric(factors$funder)
factors$installer <- as.numeric(factors$installer)
factors$basin <- as.numeric(factors$basin)
factors$subvillage <- as.numeric(factors$subvillage)
factors$region <- as.numeric(factors$region)
factors$lga <- as.numeric(factors$lga)
factors$ward <- as.numeric(factors$ward)
factors$public_meeting <- as.numeric(factors$public_meeting)
factors$scheme_management <- as.numeric(factors$scheme_management)
factors$permit <- as.numeric(factors$permit)
factors$extraction_type <- as.numeric(factors$extraction_type)
factors$extraction_type_group <- as.numeric(factors$extraction_type_group)
factors$extraction_type_class <- as.numeric(factors$extraction_type_class)
factors$management <- as.numeric(factors$management)
factors$management_group <- as.numeric(factors$management_group)
factors$payment <- as.numeric(factors$payment)
factors$payment_type <- as.numeric(factors$payment_type)
factors$water_quality <- as.numeric(factors$water_quality)
factors$quality_group <- as.numeric(factors$quality_group)
factors$quantity <- as.numeric(factors$quantity)
factors$source <- as.numeric(factors$source)
factors$source_type <- as.numeric(factors$source_type)
factors$source_class <- as.numeric(factors$source_class)
factors$waterpoint_type <- as.numeric(factors$waterpoint_type)
factors$waterpoint_type_group <- as.numeric(factors$waterpoint_type_group)
View(factors)
numerizedtrain <- cbind(factors,numerics)
View(numerizedtrain)
factors$quantity_group <- as.numeric(factors$quantity_group)
numerizedtrain <- cbind(factors,numerics)
save.image("~/Desktop/pump_it_up/R Scripts/1st_submission.RData")
scaler <- function(x) { (x-min(x))/(max(x)-min(x)) }
scaledtrain <- numerizedtrain %>% apply(2,scaler) %>% data.frame()
scaledtrain <- numerizedtrain %>% as.numeric() %>% apply(2,scaler) %>% data.frame()
glimpse(numerizedtrain)
factors$status_group <- as.numeric(factors$status_group)
numerizedtrain <- cbind(factors,numerics)
scaledtrain <- numerizedtrain %>% apply(2,scaler) %>% data.frame()
View(scaledtrain)
save.image("~/Desktop/pump_it_up/R Scripts/1st_submission.RData")
library(nnet, lib.loc = "/usr/lib/R/library")
nnetmodel <- nnet(status_group~.,data =scaledtrain,
size=4,rang=.1,decay=3,maxit=400)
nnetmodel$fitted.values
pred <- ifelse(nnetmodel$fitted.values>0.7,1,
ifelse(nnetmodel$fitted.values>0.38 && nnetmodel$fitted.values<0.7,0.5,0))
View(pred)
library(caret)
scaledtrain
confusionMatrix(pred,scaledtrain$status_group)
pred <- ifelse(nnetmodel$fitted.values>0.7,1,
ifelse(nnetmodel$fitted.values>0.38 && nnetmodel$fitted.values<0.7,0.5,0)) %>% as.factor()
confusionMatrix(pred,scaledtrain$status_group)
obs <- scaledtrain$status_group %>% as.factor()
obs
confusionMatrix(pred,obs)
scaledtrain <- numerizedtrain %>% apply(2,scaler) %>% data.frame()
View(scaledtrain)
scaledtrain$status_group <- scaledtrain$status_group %>% as.factor()
glimpse(scaledtrain)
nnetmodel <- nnet(status_group~.,data =scaledtrain,
size=4,rang=.1,decay=3,maxit=400)
scaledtrainx <- scaledtrain %>% select(-"status_group")
predict(nnetmodel,scaledtrainx)
predict(nnetmodel,scaledtrainx,type = "class")
pred <- predict(nnetmodel,scaledtrainx,type = "class")
scaledtrainy <- scaledtrain %>% select("status_group")
confusionMatrix(pred,scaledtrainy)
confusionMatrix(pred %>% as.factor(),scaledtrainy %>% as.factor())
pred <- predict(nnetmodel,scaledtrainx,type = "class") %>% as.factor()
scaledtrainy <- scaledtrain$status_group
confusionMatrix(pred,scaledtrainy)
factors <- purrr::keep(test,is.factor)
numerics <- purrr::keep(test,is.numeric)
factors$funder <- as.numeric(factors$funder)
factors$installer <- as.numeric(factors$installer)
factors$basin <- as.numeric(factors$basin)
factors$subvillage <- as.numeric(factors$subvillage)
factors$region <- as.numeric(factors$region)
factors$lga <- as.numeric(factors$lga)
factors$ward <- as.numeric(factors$ward)
factors$public_meeting <- as.numeric(factors$public_meeting)
factors$scheme_management <- as.numeric(factors$scheme_management)
factors$permit <- as.numeric(factors$permit)
factors$extraction_type <- as.numeric(factors$extraction_type)
factors$extraction_type_group <- as.numeric(factors$extraction_type_group)
factors$extraction_type_class <- as.numeric(factors$extraction_type_class)
factors$management <- as.numeric(factors$management)
factors$management_group <- as.numeric(factors$management_group)
factors$payment <- as.numeric(factors$payment)
factors$payment_type <- as.numeric(factors$payment_type)
factors$water_quality <- as.numeric(factors$water_quality)
factors$quality_group <- as.numeric(factors$quality_group)
factors$quantity <- as.numeric(factors$quantity)
factors$quantity_group <- as.numeric(factors$quantity_group)
factors$source <- as.numeric(factors$source)
factors$source_type <- as.numeric(factors$source_type)
factors$source_class <- as.numeric(factors$source_class)
factors$waterpoint_type <- as.numeric(factors$waterpoint_type)
factors$waterpoint_type_group <- as.numeric(factors$waterpoint_type_group)
factors$status_group <- as.numeric(factors$status_group)
numerizedtest <- cbind(factors,numerics)
scaledtest <- numerizedtrain %>% apply(2,scaler) %>% data.frame()
scaledtest$status_group <- scaledtrain$status_group %>% as.factor()
scaledtestx <- scaledtrain %>% select(-"status_group")
scaledtesty <- scaledtrain$status_group
numerizedtest <- cbind(factors,numerics)
scaledtest <- numerizedtrain %>% apply(2,scaler) %>% data.frame()
scaledtest$status_group <- scaledtest$status_group %>% as.factor()
scaledtestx <- scaledtrain %>% select(-"status_group")
scaledtesty <- scaledtrain$status_group
numerizedtest <- cbind(factors,numerics)
scaledtest <- numerizedtest %>% apply(2,scaler) %>% data.frame()
scaledtest$status_group <- scaledtest$status_group %>% as.factor()
scaledtestx <- scaledtrain %>% select(-"status_group")
scaledtesty <- scaledtrain$status_group
save.image("~/Desktop/pump_it_up/R Scripts/1st_submission.RData")
scaledtestx <- scaledtest %>% select(-"status_group")
scaledtesty <- scaledtest$status_group
testpred <- predict(nnetmodel,scaledtestx,type="class") %>% as.factor()
confusionMatrix(testpred,scaledtesty)
save(nnetmodel,file = "1st_submission_model.rda")
getwd()
load("1st_submission_model.rda")
View(nnetmodel)
test_x <- read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings="NA,\"\"", stringsAsFactors=TRUE)
View(test_x)
maintest <- test_x <- read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings=c("NA",""), stringsAsFactors=TRUE)
View(maintest)
View(maintest)
maintest <-  read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings=c("NA",""), stringsAsFactors=TRUE)
maintest <- maintest %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
maintest$construction_year <- ifelse(maintest$construction_year==0,NA,maintest$construction_year)
anyNA(maintest)
summary(maintest)
plasteR::na.outline(maintest)
plasteR::na.outline(maintest,plot_show = T)
median(maintest$construction_year)
getwd()
setwd("/home/samet/Desktop/pump_it_up/R Scripts")
setwd("/home/samet/Desktop/pump_it_up/Predictors")
load("14eyl8.6.rds")
load("16 Eyl. LGBM CV (9.21).rda")
mean(maintest$construction_year)
mean(maintest$construction_year,na.rm = T)
maintest$construction_year <- ifelse(is.na(maintest$construction_year),1998,maintest$construction_year)
plasteR::na.outline(maintest,plot_show = T)
load("14eyl8.6.rda")
scaler <- function(x) { (x-min(x))/(max(x)-min(x)) }
factors <- purrr::keep(maintest,is.factor)
numerics <- purrr::keep(maintest,is.numeric)
factors$funder <- as.numeric(factors$funder)
factors$installer <- as.numeric(factors$installer)
factors$basin <- as.numeric(factors$basin)
factors$subvillage <- as.numeric(factors$subvillage)
factors$region <- as.numeric(factors$region)
factors$lga <- as.numeric(factors$lga)
factors$ward <- as.numeric(factors$ward)
factors$public_meeting <- as.numeric(factors$public_meeting)
factors$scheme_management <- as.numeric(factors$scheme_management)
factors$permit <- as.numeric(factors$permit)
factors$extraction_type <- as.numeric(factors$extraction_type)
factors$extraction_type_group <- as.numeric(factors$extraction_type_group)
factors$extraction_type_class <- as.numeric(factors$extraction_type_class)
factors$management <- as.numeric(factors$management)
factors$management_group <- as.numeric(factors$management_group)
factors$payment <- as.numeric(factors$payment)
factors$payment_type <- as.numeric(factors$payment_type)
factors$water_quality <- as.numeric(factors$water_quality)
factors$quality_group <- as.numeric(factors$quality_group)
factors$quantity <- as.numeric(factors$quantity)
factors$quantity_group <- as.numeric(factors$quantity_group)
factors$source <- as.numeric(factors$source)
factors$source_type <- as.numeric(factors$source_type)
factors$source_class <- as.numeric(factors$source_class)
factors$waterpoint_type <- as.numeric(factors$waterpoint_type)
factors$waterpoint_type_group <- as.numeric(factors$waterpoint_type_group)
factors$status_group <- as.numeric(factors$status_group)
numerizedmain <- cbind(factors,numerics)
View(numerizedmain)
scaler <- function(x) { (x-min(x))/(max(x)-min(x)) }
factors <- purrr::keep(maintest,is.factor)
numerics <- purrr::keep(maintest,is.numeric)
factors$funder <- as.numeric(factors$funder)
factors$installer <- as.numeric(factors$installer)
factors$basin <- as.numeric(factors$basin)
factors$subvillage <- as.numeric(factors$subvillage)
factors$region <- as.numeric(factors$region)
factors$lga <- as.numeric(factors$lga)
factors$ward <- as.numeric(factors$ward)
factors$public_meeting <- as.numeric(factors$public_meeting)
factors$scheme_management <- as.numeric(factors$scheme_management)
factors$permit <- as.numeric(factors$permit)
factors$extraction_type <- as.numeric(factors$extraction_type)
factors$extraction_type_group <- as.numeric(factors$extraction_type_group)
factors$extraction_type_class <- as.numeric(factors$extraction_type_class)
factors$management <- as.numeric(factors$management)
factors$management_group <- as.numeric(factors$management_group)
factors$payment <- as.numeric(factors$payment)
factors$payment_type <- as.numeric(factors$payment_type)
factors$water_quality <- as.numeric(factors$water_quality)
factors$quality_group <- as.numeric(factors$quality_group)
factors$quantity <- as.numeric(factors$quantity)
factors$quantity_group <- as.numeric(factors$quantity_group)
factors$source <- as.numeric(factors$source)
factors$source_type <- as.numeric(factors$source_type)
factors$source_class <- as.numeric(factors$source_class)
factors$waterpoint_type <- as.numeric(factors$waterpoint_type)
factors$waterpoint_type_group <- as.numeric(factors$waterpoint_type_group)
numerizedmain <- cbind(factors,numerics)
median(numerizedmain$funder)
median(numerizedmain$funder,na.rm = T)
val <- unique(numerizedmain$funder[!is.na(numerizedmain$funder)])              # Values in vec_miss
mode <- val[which.max(tabulate(match(numerizedmain$funder, val)))] # Mode of vec_miss
maintest$funder <- ifelse(is.na(maintest$funder),251,maintest$funder)
plasteR::na.outline(maintest,plot_show = T)
val <- unique(numerizedmain$installer[!is.na(numerizedmain$installer)])
mode <- val[which.max(tabulate(match(numerizedmain$installer, val)))]
mode
maintest$installer <- ifelse(is.na(maintest$installer),mode,maintest$installer)
val <- unique(numerizedmain$subvillage[!is.na(numerizedmain$subvillage)])
mode <- val[which.max(tabulate(match(numerizedmain$subvillage, val)))]
mode
maintest$installer <- ifelse(is.na(maintest$subvillage),mode,maintest$subvillage)
val <- unique(numerizedmain$public_meeting[!is.na(numerizedmain$public_meeting)])
mode <- val[which.max(tabulate(match(numerizedmain$public_meeting, val)))]
mode
maintest$public_meeting <- ifelse(is.na(maintest$public_meeting),mode,maintest$public_meeting)
val <- unique(numerizedmain$scheme_management[!is.na(numerizedmain$scheme_management)])
mode <- val[which.max(tabulate(match(numerizedmain$scheme_management, val)))]
mode
maintest$scheme_management <- ifelse(is.na(maintest$scheme_management),mode,maintest$scheme_management)
val <- unique(numerizedmain$permit[!is.na(numerizedmain$permit)])
mode <- val[which.max(tabulate(match(numerizedmain$permit, val)))]
mode
maintest$permit <- ifelse(is.na(maintest$permit),mode,maintest$permit)
plasteR::na.outline(maintest,plot_show = T)
plasteR::na.outline(maintest,plot_show = T)
anyNA(maintest)
View(maintest)
plasteR::na.outline(numerizedmain,plot_show = T)
anyNA(numerizedmain)
############ imputing funder
val <- unique(numerizedmain$funder[!is.na(numerizedmain$funder)])
mode <- val[which.max(tabulate(match(numerizedmain$funder, val)))]
### funder en sık tekrar eden 251
numerizedmain$funder <- ifelse(is.na(numerizedmain$funder),mode,numerizedmain$funder)
############ imputing installer
val <- unique(numerizedmain$installer[!is.na(numerizedmain$installer)])
mode <- val[which.max(tabulate(match(numerizedmain$installer, val)))]
### installer en sık tekrar eden 248
numerizedmain$installer <- ifelse(is.na(numerizedmain$installer),mode,numerizedmain$installer)
############ imputing subvillage
val <- unique(numerizedmain$subvillage[!is.na(numerizedmain$subvillage)])
mode <- val[which.max(tabulate(match(numerizedmain$subvillage, val)))]
### installer en sık tekrar eden 7716
numerizedmain$installer <- ifelse(is.na(numerizedmain$subvillage),mode,numerizedmain$subvillage)
############ imputing public_meeting
val <- unique(numerizedmain$public_meeting[!is.na(numerizedmain$public_meeting)])
mode <- val[which.max(tabulate(match(numerizedmain$public_meeting, val)))]
### public_meeting en sık tekrar eden 2
numerizedmain$public_meeting <- ifelse(is.na(numerizedmain$public_meeting),mode,numerizedmain$public_meeting)
############ imputing scheme_management
val <- unique(numerizedmain$scheme_management[!is.na(numerizedmain$scheme_management)])
mode <- val[which.max(tabulate(match(numerizedmain$scheme_management, val)))]
### scheme management en sık tekrar eden 7
numerizedmain$scheme_management <- ifelse(is.na(numerizedmain$scheme_management),mode,numerizedmain$scheme_management)
########### imputing permit
val <- unique(numerizedmain$permit[!is.na(numerizedmain$permit)])
mode <- val[which.max(tabulate(match(numerizedmain$permit, val)))]
### permit en sık tekrar eden 2
numerizedmain$permit <- ifelse(is.na(numerizedmain$permit),mode,numerizedmain$permit)
anyNA(numerizedmain)
plasteR::na.outline(numerizedmain,plot_show = T)
maintest <-  read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings=c("NA",""), stringsAsFactors=TRUE)
maintest <- maintest %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
maintest$construction_year <- ifelse(maintest$construction_year==0,NA,maintest$construction_year)
maintest$construction_year <- ifelse(is.na(maintest$construction_year),1998,maintest$construction_year)
scaler <- function(x) { (x-min(x))/(max(x)-min(x)) }
factors <- purrr::keep(maintest,is.factor)
numerics <- purrr::keep(maintest,is.numeric)
factors$funder <- as.numeric(factors$funder)
factors$installer <- as.numeric(factors$installer)
factors$basin <- as.numeric(factors$basin)
factors$subvillage <- as.numeric(factors$subvillage)
factors$region <- as.numeric(factors$region)
factors$lga <- as.numeric(factors$lga)
factors$ward <- as.numeric(factors$ward)
factors$public_meeting <- as.numeric(factors$public_meeting)
factors$scheme_management <- as.numeric(factors$scheme_management)
factors$permit <- as.numeric(factors$permit)
factors$extraction_type <- as.numeric(factors$extraction_type)
factors$extraction_type_group <- as.numeric(factors$extraction_type_group)
factors$extraction_type_class <- as.numeric(factors$extraction_type_class)
factors$management <- as.numeric(factors$management)
factors$management_group <- as.numeric(factors$management_group)
factors$payment <- as.numeric(factors$payment)
factors$payment_type <- as.numeric(factors$payment_type)
factors$water_quality <- as.numeric(factors$water_quality)
factors$quality_group <- as.numeric(factors$quality_group)
factors$quantity <- as.numeric(factors$quantity)
factors$quantity_group <- as.numeric(factors$quantity_group)
factors$source <- as.numeric(factors$source)
factors$source_type <- as.numeric(factors$source_type)
factors$source_class <- as.numeric(factors$source_class)
factors$waterpoint_type <- as.numeric(factors$waterpoint_type)
factors$waterpoint_type_group <- as.numeric(factors$waterpoint_type_group)
numerizedmain <- cbind(factors,numerics)
val <- unique(numerizedmain$funder[!is.na(numerizedmain$funder)])
mode <- val[which.max(tabulate(match(numerizedmain$funder, val)))]
### funder en sık tekrar eden 251
numerizedmain$funder <- ifelse(is.na(numerizedmain$funder),mode,numerizedmain$funder)
############ imputing installer
val <- unique(numerizedmain$installer[!is.na(numerizedmain$installer)])
mode <- val[which.max(tabulate(match(numerizedmain$installer, val)))]
### installer en sık tekrar eden 248
numerizedmain$installer <- ifelse(is.na(numerizedmain$installer),mode,numerizedmain$installer)
############ imputing subvillage
val <- unique(numerizedmain$subvillage[!is.na(numerizedmain$subvillage)])
mode <- val[which.max(tabulate(match(numerizedmain$subvillage, val)))]
### installer en sık tekrar eden 7716
numerizedmain$subvillage <- ifelse(is.na(numerizedmain$subvillage),mode,numerizedmain$subvillage)
############ imputing public_meeting
val <- unique(numerizedmain$public_meeting[!is.na(numerizedmain$public_meeting)])
mode <- val[which.max(tabulate(match(numerizedmain$public_meeting, val)))]
### public_meeting en sık tekrar eden 2
numerizedmain$public_meeting <- ifelse(is.na(numerizedmain$public_meeting),mode,numerizedmain$public_meeting)
############ imputing scheme_management
val <- unique(numerizedmain$scheme_management[!is.na(numerizedmain$scheme_management)])
mode <- val[which.max(tabulate(match(numerizedmain$scheme_management, val)))]
### scheme management en sık tekrar eden 7
numerizedmain$scheme_management <- ifelse(is.na(numerizedmain$scheme_management),mode,numerizedmain$scheme_management)
########### imputing permit
val <- unique(numerizedmain$permit[!is.na(numerizedmain$permit)])
mode <- val[which.max(tabulate(match(numerizedmain$permit, val)))]
### permit en sık tekrar eden 2
numerizedmain$permit <- ifelse(is.na(numerizedmain$permit),mode,numerizedmain$permit)
anyNA(numerizedmain)
scaledmain <- numerizedmain %>% apply(2,scaler) %>% data.frame()
View(scaledmain)
predict(nnetmodel,scaledmain)
predict(nnetmodel,scaledmain,type="class")
predictions <- predict(nnetmodel,scaledmain,type="class")
predictions <- predict(nnetmodel,scaledmain,type="class") %>% as.factor()
View(predictions)
frequency(predictions)
summary(predictions)
View(scaledmain)
View(scaledtest)
View(numerizedtest)
View(test)
summary(test$status_group)
library(readr)
submitter <- read_csv("~/Desktop/pump_it_up/SubmissionFormat.csv")
View(submitter)
##### 0 functional, 0.5 functional needs repair, 1 non functional
textpred <- ifelse(predictions==0,"functional",
ifelse(predictions==0.5,"functional needs repair","non functional"))
numerizedmain
submitter <- read_csv("~/Desktop/pump_it_up/SubmissionFormat.csv")
View(maintest)
submitter
View(submitter)
nrow(submitter)
submitter$status_group <- textpred
read.csv(submitter)
read.csv(submitter,file="1st_submit.csv")
submitter
getwd()
setwd("/home/samet/Desktop/pump_it_up")
read.csv(submitter,file="1st_submit.csv")
write.csv(submitter,file="1st_submit.csv")
submitter
write_csv(submitter,file="1st_submit.csv")
write_csv(submitter,"1st_submit.csv")
save.image("~/Desktop/pump_it_up/R Scripts/1st_submission.RData")
