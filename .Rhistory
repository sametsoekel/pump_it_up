View(test)
summary(test$status_group)
library(readr)
submitter <- read_csv("~/Desktop/pump_it_up/SubmissionFormat.csv")
View(submitter)
##### 0 functional, 0.5 functional needs repair, 1 non functional
textpred <- ifelse(predictions==0,"functional",
ifelse(predictions==0.5,"functional needs repair","non functional"))
numerizedmain
submitter <- read_csv("~/Desktop/pump_it_up/SubmissionFormat.csv")
View(maintest)
submitter
View(submitter)
nrow(submitter)
submitter$status_group <- textpred
read.csv(submitter)
read.csv(submitter,file="1st_submit.csv")
submitter
getwd()
setwd("/home/samet/Desktop/pump_it_up")
read.csv(submitter,file="1st_submit.csv")
write.csv(submitter,file="1st_submit.csv")
submitter
write_csv(submitter,file="1st_submit.csv")
write_csv(submitter,"1st_submit.csv")
save.image("~/Desktop/pump_it_up/R Scripts/1st_submission.RData")
df <- read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings = c("NA",""),stringsAsFactors=TRUE)
View(df)
kk <- na.omit(df)
df$construction_year
df$construction_year <- ifelse(is.na(df$construction_year),NA,df$construction_year)
kk<-na.omit(df)
kk<-na.omit(df)
df$construction_year <- ifelse(is.na(df$construction_year),NA,df$construction_year)
kk<-na.omit(df)
df$construction_year
df$construction_year <- ifelse(df$construction_year==0,NA,df$construction_year)
kk<-na.omit(df)
kk<-na.omit(df)
df$construction_year
NULL
NULL
NULL
NULL
NULL
NA
NA
NA
NA
NA
NA
NA
View(df)
mean(df$construction_year,na.rm=T)
summary(df$construction_year,na.rm=T)
df[is.na(df$construction_year)]
df[is.na(df$construction_year),]
kk<-df[is.na(df$construction_year),]
View(kk)
kk[complete.cases]
kk[complete.cases,]
kk[!complete.cases,]
kk<-df[is.na(df$construction_year),]
View(kk)
kk<-df[is.na(df$construction_year)&&~!is.na(),]
kk<-df[is.na(df$construction_year),]
kk<-df[is.na(df$construction_year),]
complete.cases(kk)
kk[complete.cases(kk)]
kk<-df[is.na(df$construction_year),] %>%
kk[complete.cases(kk %>% select(-"construction_year"))]
library(dplyr)
kk<-df[is.na(df$construction_year),] %>%
kk[complete.cases(kk %>% select(-"construction_year"))]
kk<-df[is.na(df$construction_year),] %>%
kk[complete.cases(kk %>% select(-"construction_year")),]
kk<-df[is.na(df$construction_year),] %>%
kk[complete.cases(kk %>% select(-"construction_year"))]
complete.cases(kk %>% select(-"construction_year"))
v <- complete.cases(kk %>% select(-"construction_year"))
kk<-df[is.na(df$construction_year),] %>%
kk[v]
kk<-df[is.na(df$construction_year),] %>%
kk[v,]
kk<-df[is.na(df$construction_year),] %>%
kk[,v]
kk<-df[is.na(df$construction_year),] %>%
kk[v]
kk[v]
kk[v,]
kk<-kk[v,]
full <- df[complete.cases(df),]
library(varhandle)
unfactor(2)
unfactor(c(3,4))
df[is.na(construction_year)]
df[is.na(df$construction_year)]
df[is.na(df$construction_year),]
df[is.na(df$construction_year)&&complete.cases(df %>% select(-"construction_year")),]
complete.cases(df %>% select(-"construction_year"))
df$construction_year)&&complete.cases(df %>% select(-"construction_year"))
is.na(df$construction_year)&&complete.cases(df %>% select(-"construction_year"))
TRUE+TRUE
TRUE+TRUE+TRUE
TRUE&&TRUE
TRUE&&FALSE
FALSE&&FALSE
df[is.na(df$construction_year)&&complete.cases(df %>% select(-"construction_year")),]
df[is.na(df$construction_year)]
df[is.na(df$construction_year),]
#### Picking just NA construction years
logvector <- is.na(df$construction_year)&&complete.cases(df %>% select(-"construction_year"))
is.na(df$construction_year)
complete.cases(df %>% select(-"construction_year"))
#### Picking just NA construction years
logvector <- is.na(df$construction_year)&complete.cases(df %>% select(-"construction_year"))
df[logvector,]
construction_year_target <- df[logvector,]
View(construction_year_target)
construction_year_target <- df[logvector,] %>% select(-"construction_year")
full %>% as.numeric()
full %>% unfactor()
View(full %>% unfactor())
full %>% unfactor() %>% as.numeric()
full %>% unfactor() %>% as.character() %>% as.numeric()
glimpse(full)
full$quality_group %>% as.numeric()
numerizer <- function(x) { if(is.factor(x)){return(as.numeric(x))}  }
apply(full,2,numerizer)
numerizer <- function(x) { if(is.factor(x)){return(as.numeric(x))}  }
apply(full,2,numerizer)
numerizer <- function(x) {
if(is.factor(x)){
return(as.numeric(x))
}
}
apply(full,2,numerizer)
numerizer <- function(x) {
if(is.factor(x)){
as.numeric(x)
}
else{
x
}
}
apply(full,2,numerizer)
View(apply(full,2,numerizer))
kk<-apply(full,2,numerizer)
kk<-apply(full,2,numerizer) %>% data.frame()
glimpse(kk)
numerizer <- function(x) {
if(is.factor(x)){
as.numeric(x)
}
else{
as.numeric(x)
}
}
kk<-apply(full,2,numerizer) %>% data.frame()
glimpse(kk)
numerizer <- function(x) {
if(is.factor(x)){
as.numeric(x)
}
else{
x
}
}
kk<-apply(full,2,numerizer) %>% data.frame()
glimpse(kk)
kk<-apply(full,2,numerizer) %>% data.frame() %>% as.numeric()
kk<-apply(full,2,numerizer) %>% data.frame() %>% unclass()
glimpse(kk)
kk<-apply(full,2,numerizer)
kk<-apply(full,2,numerizer)
numerizer <- function(x) {
if(is.factor(x)){
as.numeric(x)
}
else{
unfactor(x)
}
}
kk<-apply(full,2,numerizer)
numerizer <- function(x) {
if(is.factor(x)){
as.numeric(x)
}
else{
x
}
}
kk<-apply(full,2,numerizer)
glimpse(kk)
kk<-apply(full,2,numerizer)
kk<-apply(full,2,numerizer) %>% data.frame()
glimpse(kk)
as.data.frame.numeric_version(full)
View(as.data.frame.numeric_version(full))
as.data.frame.numeric_version(full)
as.data.frame.numeric_version(full) %>% data.frame()
as.data.frame.numeric_version(full) %>% data.frame() %>% View()
numerizer <- function(x) {
as.numeric(as.character(x))
}
kk<-apply(full,2,numerizer) %>% data.frame()
glimpse(kk)
as.data.frame(lapply(full, as.numeric))
as.data.frame(lapply(full, as.numeric)) %>% View()
full_num <- as.data.frame(lapply(full, as.numeric))
glimpse(full_num)
index <- sample(1:nrow(full),nrow(full))
construction_year_target_num <- as.data.frame(lapply(construction_year_target, as.numeric))
nrow(full)*.7
nrow(full)*.71
nrow(full)*.72
scaler <- function(x){x-min(x)/(max(x)-min(x))}
full_scaled <- full_num %>% apply(2,scaler) %>% data.frame()
save.image("~/Desktop/pump_it_up/R Scripts/17 Eyl_ FULL STACK.RData")
View(full_scaled)
scaler <- function(x){x-min(x)/(max(x)-min(x))}
full_scaled <- full_num %>% apply(2,scaler) %>% data.frame()
View(full_scaled)
full_scaled <- full_num %>% select(-"id") %>% apply(2,scaler) %>% data.frame()
View(full_scaled)
View(full_num)
full_num <- as.data.frame(lapply(full, as.numeric))
full_scaled <- full_num %>% select(-"id") %>% apply(2,scaler) %>% data.frame()
View(full_scaled)
apply(full_num,2,scaler) %>% View()
scaler <- function(x){(x-min(x))/(max(x)-min(x))}
full_scaled <- full_num %>% select(-"id") %>% apply(2,scaler) %>% data.frame()
View(full_scaled)
full_scaled <- full_num %>% select(-"id") %>% apply(2,scaler) %>% data.frame() %>% cbind(full_num$id)
View(full_scaled)
full_scaled <- full_num %>% select(-"id") %>% apply(2,scaler) %>% data.frame() %>% cbind(id =full_num$id)
View(construction_year_target_num)
construction_year_target_scaled <- construction_year_target_num %>% select(-"id") %>% apply(2,scaler) %>% data.frame() %>% cbind(id=construction_year_target$id)
View(construction_year_target_scaled)
nrow(full)*.72
train_index <- index[1:3906]
train<-df[train_index,]
test<-df[!train_index,]
train<-df[train_index,]
test<-df[!train_index,]
train<-full[train_index,]
test<-full[!train_index,]
train<-full_scaled[train_index,]
test<-full_scaled[!train_index,]
test<-full_scaled[!train_index,]
test<-full_scaled[!train_index,]
summary(train_index)
train<-full_scaled[train_index,]
test<-full_scaled[-train_index,]
train<-full_scaled[train_index,]
train_y<-train$construction_year
test<-full_scaled[-train_index,]
test_x<-test %>% select(-"construction_year")
test_y<-test$construction_year
train %>% select(-"id")
nnetmodel <- nnet(construction_year~.,data =train %>% select(-"id"),
size=16,rang=.1,decay=3,maxit=400)
library(nnet, lib.loc = "/usr/lib/R/library")
nnetmodel <- nnet(construction_year~.,data =train %>% select(-"id"),
size=16,rang=.1,decay=3,maxit=400)
nnetmodel <- nnet(construction_year~.,data =train %>% select(-"id"),
size=16,rang=.1,decay=3,maxit=400)
nnetmodel <- nnet(construction_year~.,data =train %>% select(-"id"),
size=12,rang=.1,decay=3,maxit=1000)
View(nnetmodel)
withnoid<-train %>% select(-"id")
nnetmodel <- nnet(construction_year~.,data =withnoid,
size=12,rang=.1,decay=3,maxit=1000)
nnetmodel$fitted.values
View(withnoid)
glimpse(withnoid)
nnetmodel <- nnet(construction_year~.,data =withnoid,
size=12,rang=.1,decay=3,maxit=1000)
test_x<-test %>% select(-c("construction_year","id"))
nnetmodel <- nnet(test_x,test_y,
size=12,rang=.1,decay=3,maxit=1000)
nnetmodel <- nnet(test_x,test_y,
size=12,rang=.1,decay=3,maxit=1000)
nnetmodel <- nnet(x=test_x,test_y,
size=12,rang=.1,decay=3,maxit=1000)
nnetmodel <- nnet(construction_year~.,data =withnoid,
size=12,rang=.1,decay=3,maxit=1000)
withnoid
View(withnoid)
df <- df %>% select(-c(,"wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
full <- df[complete.cases(df),]
full_num <- as.data.frame(lapply(full, as.numeric))
full_scaled <- full_num %>% select(-"id") %>% apply(2,scaler) %>% data.frame() %>% cbind(id =full_num$id)
scaler <- function(x){(x-min(x))/(max(x)-min(x))}
#### Picking just NA construction years
logvector <- is.na(df$construction_year)&complete.cases(df %>% select(-"construction_year"))
construction_year_target <- df[logvector,] %>% select(-"construction_year")
construction_year_target_num <- as.data.frame(lapply(construction_year_target, as.numeric))
construction_year_target_scaled <- construction_year_target_num %>% select(-"id") %>% apply(2,scaler) %>% data.frame() %>% cbind(id=construction_year_target$id)
index <- sample(1:nrow(full),nrow(full))
train_index <- index[1:3906]
train<-full_scaled[train_index,]
train_y<-train$construction_year
test<-full_scaled[-train_index,]
test_x<-test %>% select(-c("construction_year","id"))
test_y<-test$construction_year
withnoid<-train %>% select(-"id")
nnetmodel <- nnet(construction_year~.,data =withnoid,
size=12,rang=.1,decay=3,maxit=1000)
nnetmodel$fitted.values
trainpred <- nnetmodel$fitted.values* (min(construction_year_target_num) - max(construction_year_target_num)) + max(construction_year_target_num)
trainpred <- nnetmodel$fitted.values* (min(full_scaled$construction_year) - max(full_scaled$construction_year)) + max(full_scaled$construction_year)
df <- df %>% select(-c("wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
trainpred <- nnetmodel$fitted.values* (min(full_num$construction_year) - max(full_num$construction_year)) + max(full_num$construction_year)
obs <- train_y
obs <- train_y* (min(full_num$construction_year) - max(full_num$construction_year)) + max(full_num$construction_year)
library(caret)
defaultSummary(data.frame(obs=obs,pred=trainpred))
save.image("~/Desktop/pump_it_up/R Scripts/17 Eyl_ FULL STACK.RData")
View(nnetmodel)
df <- read.csv("~/Desktop/pump_it_up/Data/train_x.csv", na.strings=c("NA",""), stringsAsFactors=TRUE)
train_y <- read.csv("~/Desktop/pump_it_up/Data/train_y.csv", stringsAsFactors=TRUE)
df <- df %>% select(-c("wpt_name","num_private","date_recorded","recorded_by","scheme_name","id"))
train_y <- train_y$status_group
df <- cbind(df,status_group=train_y)
df$construction_year <- ifelse(df$construction_year==0,NA,df$construction_year)
full<-na.omit(df)
full$status_group <- as.numeric(full$status_group)-1
library(dplyr)
library(caret)
library(lightgbm)
df <- read.csv("~/Desktop/pump_it_up/Data/train_x.csv", na.strings=c("NA",""), stringsAsFactors=TRUE)
train_y <- read.csv("~/Desktop/pump_it_up/Data/train_y.csv", stringsAsFactors=TRUE)
df <- df %>% select(-c("wpt_name","num_private","date_recorded","recorded_by","scheme_name","id"))
train_y <- train_y$status_group
df <- cbind(df,status_group=train_y)
df$construction_year <- ifelse(df$construction_year==0,NA,df$construction_year)
full<-na.omit(df)
full$status_group <- as.numeric(full$status_group)-1
dataset<-full
catnames <- full %>% purrr::keep(is.factor) %>% names()
lgbtrain <- dataset[1:25473,]
lgbtrainx <- lgbtrain %>% select(-c("status_group"))
lgbtest <- dataset[25474:32473,]
lgbtestx <- lgbtest %>% select(-c("status_group"))
lgbtesty <- lgbtest$status_group
dtrain <- lgb.Dataset(as.matrix(lgbtrainx),label=lgbtrain$status_group)
dtest <- lgb.Dataset(as.matrix(lgbtestx),label=lgbtest$status_group)
valids <- list(test = dtest)
ststorage.mode(df)
storage.mode(df)
params <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 2000
, min_data = 1L
, valids = valids
, learning_rate = 0.037
, categorical_feature = catnames
)
lgbmodel$best_score
lgbmodel$best_iter
pred <- predict(lgbmodel,as.matrix(lgbtestx))
pred %>% View()
lgbtesty %>% View()
pred <- predict(lgbmodel,as.matrix(lgbtestx),reshape = T)
pred %>% View()
tahmin <- pred %>% data.frame()
apply(tahmin,1,function(x) max(x))
myf <- function(x){
max(x)%in%x
}
apply(tahmin,1,myf)
myf <- function(x){
match(max(x),x)
}
apply(tahmin,1,myf)
apply(tahmin,1,myf)-1
preds <- apply(tahmin,1,myf)-1
preds <- as.factor(preds)
obstest <- lgbtesty %>% as.factor()
confusionMatrix(preds,obstest)
fullsubmission <- read.csv("~/Desktop/pump_it_up/fullsubmission.csv", stringsAsFactors=TRUE)
View(fullsubmission)
anyNA(fullsubmission)
submpred <- predict(lgbmodel,fullsubmission,reshape = T)
submpred <- predict(lgbmodel,as.matrix(fullsubmission),reshape = T)
fullsubmission %>% select(-"id")
submpred <- predict(lgbmodel,as.matrix(fullsubmission),reshape = T)
fullsubmission %>% select(-"id")
SubmissionFormat <- read.csv("~/Desktop/pump_it_up/SubmissionFormat.csv")
View(SubmissionFormat)
fullsubmission <- fullsubmission %>% select(-"id")
submpred <- predict(lgbmodel,as.matrix(fullsubmission),reshape = T)
tahmin <- submpred %>% data.frame()
myf <- function(x){
match(max(x),x)
}
preds <- apply(tahmin,1,myf)-1
preds <- as.factor(preds)
obstest <- lgbtesty %>% as.factor()
length(preds)
preds
textpred <- ifelse(preds==0,"functional",
ifelse(predictions==1,"functional needs repair","non functional"))
textpred <- ifelse(preds==0,"functional",
ifelse(preds==1,"functional needs repair","non functional"))
SubmissionFormat$status_group<-textpred
View(SubmissionFormat)
library(readr)
write_csv(SubmissionFormat,"2nd_submission.csv")
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, categorical_feature = catnames
)
pred <- predict(lgbmodel,as.matrix(lgbtestx),reshape = T)
tahmin <- pred %>% data.frame()
preds <- apply(tahmin,1,myf)-1
preds <- as.factor(preds)
obstest <- lgbtesty %>% as.factor()
confusionMatrix(preds,obstest)
boktanimpute <- read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings="NA,", stringsAsFactors=TRUE)
View(boktanimpute)
boktanimpute <- read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings=c("NA",""), stringsAsFactors=TRUE)
anyNA(boktanimpute)
numerizedmain <- boktanimpute
val <- unique(numerizedmain$funder[!is.na(numerizedmain$funder)])
mode <- val[which.max(tabulate(match(numerizedmain$funder, val)))]
numerizedmain$funder <- ifelse(is.na(numerizedmain$funder),mode,numerizedmain$funder)
val <- unique(numerizedmain$installer[!is.na(numerizedmain$installer)])
mode <- val[which.max(tabulate(match(numerizedmain$installer, val)))]
numerizedmain$installer <- ifelse(is.na(numerizedmain$installer),mode,numerizedmain$installer)
val <- unique(numerizedmain$subvillage[!is.na(numerizedmain$subvillage)])
mode <- val[which.max(tabulate(match(numerizedmain$subvillage, val)))]
numerizedmain$subvillage <- ifelse(is.na(numerizedmain$subvillage),mode,numerizedmain$subvillage)
val <- unique(numerizedmain$public_meeting[!is.na(numerizedmain$public_meeting)])
mode <- val[which.max(tabulate(match(numerizedmain$public_meeting, val)))]
numerizedmain$public_meeting <- ifelse(is.na(numerizedmain$public_meeting),mode,numerizedmain$public_meeting)
val <- unique(numerizedmain$scheme_management[!is.na(numerizedmain$scheme_management)])
mode <- val[which.max(tabulate(match(numerizedmain$scheme_management, val)))]
numerizedmain$scheme_management <- ifelse(is.na(numerizedmain$scheme_management),mode,numerizedmain$scheme_management)
val <- unique(numerizedmain$permit[!is.na(numerizedmain$permit)])
mode <- val[which.max(tabulate(match(numerizedmain$permit, val)))]
numerizedmain$permit <- ifelse(is.na(numerizedmain$permit),mode,numerizedmain$permit)
anyNA(numerizedmain)
plasteR::na.outline(numerizedmain)
boktanimpute <- read.csv("~/Desktop/pump_it_up/Data/test_x.csv", na.strings=c("NA",""), stringsAsFactors=TRUE)
boktanimpute <- boktanimpute %>% select(-c("id","wpt_name","num_private","date_recorded","recorded_by","scheme_name",))
numerizedmain <- boktanimpute
############ imputing funder
val <- unique(numerizedmain$funder[!is.na(numerizedmain$funder)])
mode <- val[which.max(tabulate(match(numerizedmain$funder, val)))]
### funder en sık tekrar eden 251
numerizedmain$funder <- ifelse(is.na(numerizedmain$funder),mode,numerizedmain$funder)
############ imputing installer
val <- unique(numerizedmain$installer[!is.na(numerizedmain$installer)])
mode <- val[which.max(tabulate(match(numerizedmain$installer, val)))]
### installer en sık tekrar eden 248
numerizedmain$installer <- ifelse(is.na(numerizedmain$installer),mode,numerizedmain$installer)
############ imputing subvillage
val <- unique(numerizedmain$subvillage[!is.na(numerizedmain$subvillage)])
mode <- val[which.max(tabulate(match(numerizedmain$subvillage, val)))]
### installer en sık tekrar eden 7716
numerizedmain$subvillage <- ifelse(is.na(numerizedmain$subvillage),mode,numerizedmain$subvillage)
############ imputing public_meeting
val <- unique(numerizedmain$public_meeting[!is.na(numerizedmain$public_meeting)])
mode <- val[which.max(tabulate(match(numerizedmain$public_meeting, val)))]
### public_meeting en sık tekrar eden 2
numerizedmain$public_meeting <- ifelse(is.na(numerizedmain$public_meeting),mode,numerizedmain$public_meeting)
############ imputing scheme_management
val <- unique(numerizedmain$scheme_management[!is.na(numerizedmain$scheme_management)])
mode <- val[which.max(tabulate(match(numerizedmain$scheme_management, val)))]
### scheme management en sık tekrar eden 7
numerizedmain$scheme_management <- ifelse(is.na(numerizedmain$scheme_management),mode,numerizedmain$scheme_management)
########### imputing permit
val <- unique(numerizedmain$permit[!is.na(numerizedmain$permit)])
mode <- val[which.max(tabulate(match(numerizedmain$permit, val)))]
### permit en sık tekrar eden 2
numerizedmain$permit <- ifelse(is.na(numerizedmain$permit),mode,numerizedmain$permit)
anyNA(numerizedmain)
boktanpred <- predict(lgbmodel,as.matrix(numerizedmain),reshape = T)
preds <- boktanpred %>% data.frame()
preds <- apply(tahmin,1,myf)-1
preds <- as.factor(preds)
textpred <- ifelse(preds==0,"functional",
ifelse(preds==1,"functional needs repair","non functional"))
preds <- boktanpred %>% data.frame()
preds <- apply(preds,1,myf)-1
preds <- as.factor(preds)
textpred <- ifelse(preds==0,"functional",
ifelse(preds==1,"functional needs repair","non functional"))
SubmissionFormat$status_group<-textpred
write_csv(SubmissionFormat,"2.2nd_submission.csv")
numerizedmain %>% View()
numerizedmain$construction_year <- ifelse(is.na(numerizedmain$construction_year),2010,numerizedmain$construction_year)
summary(numerizedmain$construction_year)
numerizedmain$construction_year <- ifelse(numerizedmain$construction_year==0,2010,numerizedmain$construction_year)
summary(numerizedmain$construction_year)
boktanpred <- predict(lgbmodel,as.matrix(numerizedmain),reshape = T)
preds <- boktanpred %>% data.frame()
preds <- apply(preds,1,myf)-1
preds <- as.factor(preds)
textpred <- ifelse(preds==0,"functional",
ifelse(preds==1,"functional needs repair","non functional"))
SubmissionFormat$status_group<-textpred
write_csv(SubmissionFormat,"2.3nd_submission.csv")
