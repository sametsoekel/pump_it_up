train_y <- as.numeric(train$status_group)-1
catnames <- test %>% purrr::keep(is.factor) %>% names()
learnpool <- catboost.load_pool(train_x,label=train_y,cat_features = catnames)
testpool <- catboost.load_pool(test_x,label=test_y,cat_features = catnames)
save.image("~/Desktop/pump_it_up/R Scripts/20eylul1st.RData")
catparam <- list(use_best_model=T,loss_function='Logloss',eval_metric='Accuracy',
depth=8,learning_rate=0.37,iterations=70,prediction_type='Class')
library(catboost)
learnpool <- catboost.load_pool(train_x,label=train_y,cat_features = catnames)
testpool <- catboost.load_pool(test_x,label=test_y,cat_features = catnames)
catparam <- list(use_best_model=T,loss_function='Logloss',eval_metric='Accuracy',
depth=8,learning_rate=0.37,iterations=70,prediction_type='Class')
catmodel <- catboost.train(learnpool,testpool,catparam)
catparam <- list(use_best_model=T,loss_function='MultiClass',eval_metric='Accuracy',
depth=8,learning_rate=0.37,iterations=70,prediction_type='Class')
catmodel <- catboost.train(learnpool,testpool,catparam)
catparam <- list(use_best_model=T,loss_function='MultiClass',eval_metric='Accuracy',
depth=9,learning_rate=0.037,iterations=70,prediction_type='Class')
catmodel <- catboost.train(learnpool,testpool,catparam)
catparam <- list(use_best_model=T,loss_function='MultiClass',eval_metric='Accuracy',
depth=9,learning_rate=0.037,iterations=170,prediction_type='Class')
catmodel <- catboost.train(learnpool,testpool,catparam)
catparam <- list(use_best_model=T,loss_function='MultiClass',eval_metric='Accuracy',
depth=10,learning_rate=0.069,iterations=220,prediction_type='Class')
catmodel <- catboost.train(learnpool,testpool,catparam)
target <- read.csv("~/Desktop/pump_it_up/ImputedCatBoostModMedian2.csv", stringsAsFactors=TRUE)
View(target)
target <- target %>% select(-"id")
library(dplyr)
target <- target %>% select(-"id")
catpred <- catboost.predict(catmodel,catboost.load_pool(target),prediction_type = 'Class')
textpred <- ifelse(catpred==0,"functional",
ifelse(catpred==1,"functional needs repair","non functional"))
textpred <- ifelse(catpred==0,"functional",
ifelse(catpred==1,"functional needs repair","non functional"))
SubmissionFormat <- read.csv("~/Desktop/pump_it_up/SubmissionFormat.csv", stringsAsFactors=TRUE)
View(SubmissionFormat)
library(readr)
SubmissionFormat$status_group
SubmissionFormat$status_group <- textpred
SubmissionFormat$status_group
write_csv(SubmissionFormat,"11thSubByCatBOOST.csv")
catparam2 <- list(use_best_model=T,loss_function='MultiClass',eval_metric='Accuracy',
depth=8,learning_rate=0.08,iterations=220,prediction_type='Class')
catmodel2 <- catboost.train(learnpool,testpool,catparam2)
catpred2 <- catboost.predict(catmodel2,catboost.load_pool(target),prediction_type = 'Class')
library(caret)
confusionMatrix(as.factor(catpred),as.factor(catpred2))
textpred2 <- ifelse(catpred2==0,"functional",
ifelse(catpred2==1,"functional needs repair","non functional"))
SubmissionFormat$status_group <- textpred2
write_csv(SubmissionFormat,"12thSubByCatBOOST.csv")
catparam3 <- list(use_best_model=T,loss_function='MultiClass',eval_metric='Accuracy',
depth=7,learning_rate=0.081,iterations=400,prediction_type='Class')
catparam3 <- list(use_best_model=T,loss_function='MultiClass',eval_metric='Accuracy',
depth=7,learning_rate=0.088,iterations=400,prediction_type='Class')
catmodel3 <- catboost.train(learnpool,testpool,catparam2)
catpred3 <- catboost.predict(catmodel3,catboost.load_pool(target),prediction_type = 'Class')
confusionMatrix(as.matrix(catpred),as.matrix(catpred2))
confusionMatrix(as.factor(catpred),as.factor(catpred2))
confusionMatrix(as.factor(catpred),as.factor(catpred3))
confusionMatrix(as.factor(catpred),as.factor(catpred2))
confusionMatrix(as.factor(catpred),as.factor(catpred3))
confusionMatrix(as.factor(catpred2),as.factor(catpred3))
catmodel3 <- catboost.train(learnpool,testpool,catparam3)
catpred3 <- catboost.predict(catmodel3,catboost.load_pool(target),prediction_type = 'Class')
confusionMatrix(as.factor(catpred2),as.factor(catpred3))
catpred3 <- catboost.predict(catmodel3,catboost.load_pool(target),prediction_type = 'Class')
textpred3 <- ifelse(catpred3==0,"functional",
ifelse(catpred3==1,"functional needs repair","non functional"))
SubmissionFormat$status_group <- textpred2
SubmissionFormat$status_group <- textpred3
write_csv(SubmissionFormat,"13thSubByCatBOOST.csv")
save.image("~/Desktop/pump_it_up/R Scripts/20eylul1st.RData")
ImputePredictiveandModeFull59k <- read.csv("~/Desktop/pump_it_up/Imputed Train Set/ImputePredictiveandModeFull59k.csv", stringsAsFactors=TRUE)
View(ImputePredictiveandModeFull59k)
df <- read.csv("~/Desktop/pump_it_up/Imputed Train Set/ImputePredictiveandModeFull59k.csv", stringsAsFactors=TRUE)
boxplot(df)
View(df)
df <- read.csv("~/Desktop/pump_it_up/Imputed Train Set/19EylImputedCatBOOST.csv", stringsAsFactors=TRUE)
View(df)
boxplot(df)
mvoutlier::mvoutlier.CoDa(df)
mvoutlier::mvoutlier.CoDa(df$amount_tsh)
mvoutlier::mvoutlier.CoDa(df)
mvoutlier::mvoutlier.CoDa(df[,-c("longitude","latitude")])
df[,-c("longitude","latitude")]
library(dplyr)
x <- df %>% select(-c("longitude","latitude"))
mvoutlier::mvoutlier.CoDa(x)
summary(df)
x <- df %>% select(-c("longitude","latitude","gps_height"))
mvoutlier::mvoutlier.CoDa(x)
anyNA(df)
warnings()
x <- purrr::keep(is.numeric)
x <- x %>% purrr::keep(is.numeric)
mvoutlier::mvoutlier.CoDa(x)
x <- df %>% select(-c("id","status_group"))
df <- read.csv("~/Desktop/pump_it_up/Imputed Train Set/19EylImputedCatBOOST.csv", stringsAsFactors=TRUE)
df <- df %>% select(-c("id"))
train_index <- sample(1:nrow(df),nrow(df)*0.7)
train_index <- sample(1:nrow(df),nrow(df)*0.78)
train_index <- sample(1:nrow(df),nrow(df)*0.6)
train_index <- sample(1:nrow(df),nrow(df)*0.63)
train_index <- sample(1:nrow(df),nrow(df)*0.90)
train_index <- sample(1:nrow(df),nrow(df)*0.80)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_index <- sample(1:nrow(df),nrow(df)*0.74)
train_x <- df[train_index,] %>% select(-"status_group")
train_y <- df[train_index,]$status_group
length(train_y)
test_x <-  df[-train_index,] %>% select(-"status_group")
test_y <- df[-train_index,]$status_group
library(catboost)
test_y
head(test_y)
test_y <- as.numeric(df[-train_index,]$status_group)-1
test_y
head(test_y)
train_y <- as.numeric(df[train_index,]$status_group)-1
catnames <- train_x %>% purrr::keep(is.factor) %>% names()
learnpool <- catboost.load_pool(train_x,label = train_y,cat_features = catnames)
testpool <- catboost.load_pool(test_x,label = test_y,cat_features = catnames)
catparam <- list(use_best_model=T,loss_function='MultiClass',custom_loss='Accuracy',
prediction_type='Class',learning_rate=0.037,depth=8,iterations=200)
catparam <- list(use_best_model=T,loss_function='MultiClass',custom_loss='Accuracy',
prediction_type='Class',learning_rate=0.03769,depth=8,iterations=200)
catmodel <- catboost.train(learnpool,testpool,catparam)
pred <- catboost.predict(catmodel2,catboost.load_pool(test_x),prediction_type = 'Class')
pred <- catboost.predict(catmodel,catboost.load_pool(test_x),prediction_type = 'Class')
pred <- catboost.predict(catmodel,catboost.load_pool(test_x),prediction_type = 'Class') %>% as.factor()
library(caret)
confusionMatrix(pred,as.factor(test_y))
catparam <- list(use_best_model=T,loss_function='MultiClass',custom_loss='Accuracy',
prediction_type='Class',learning_rate=0.3769,depth=8,iterations=200)
catmodel <- catboost.train(learnpool,testpool,catparam)
pred <- catboost.predict(catmodel,catboost.load_pool(test_x),prediction_type = 'Class') %>% as.factor()
confusionMatrix(pred,as.factor(test_y))
z <- read.csv("~/Desktop/pump_it_up/ImputedCatBoostModMedian2.csv", stringsAsFactors=TRUE)
View(z)
z <- z %>% select(-"id")
subpred <- catboost.predict(catmodel,catboost.load_pool(z),prediction_type = 'Class') %>% as.factor()
length(z)
length(subpred )
SubmissionFormat <- read.csv("~/Desktop/pump_it_up/SubmissionFormat.csv", stringsAsFactors=TRUE)
View(SubmissionFormat)
textpred <- ifelse(subpred==0,"functional",
ifelse(subpred==1,"functional needs repair","non functional"))
SubmissionFormat$status_group <- textpred
View(SubmissionFormat)
library(readr)
write_csv(SubmissionFormat,"22EylCatBOOSTSub.csv")
save.image("~/Desktop/pump_it_up/R Scripts/22EylThreeModel.RData")
load("~/Desktop/pump_it_up/R Scripts/22EylThreeModel.RData")
learnpool <- catboost.load_pool(train_x,label = train_y,cat_features = catnames)
library(catboost)
library(dplyr)
library(caret)
learnpool <- catboost.load_pool(train_x,label = train_y,cat_features = catnames)
testpool <- catboost.load_pool(test_x,label = test_y,cat_features = catnames)
catparam <- list(use_best_model=T,loss_function='MultiClass',custom_loss='Accuracy',
prediction_type='Class',learning_rate=0.4455,depth=9,iterations=400)
catmodel <- catboost.train(learnpool,testpool,catparam)
pred <- catboost.predict(catmodel,catboost.load_pool(test_x),prediction_type = 'Class') %>% as.factor()
confusionMatrix(pred,as.factor(test_y))
catparam <- list(use_best_model=T,loss_function='Accuracy',custom_loss='Accuracy',
prediction_type='Class',learning_rate=0.4455,depth=9,iterations=400)
catmodel <- catboost.train(learnpool,testpool,catparam)
catparam <- list(use_best_model=T,loss_function='MultiClass',custom_loss='Accuracy',
prediction_type='Class',learning_rate=0.4455,depth=9,iterations=400)
library(lightgbm)
dtrain <- lgb.train(as.matrix(train_x),label = train_y)
dtrain <- lgb.train(data = as.matrix(train_x),label = train_y)
dtrain <- lgb.Dataset(as.matrix(train_x),label = train_y)
dtest <- lgb.Dataset(as.matrix(test_x),label = test_y)
as.matrix(test_x),
as.matrix(test_x)
lgbparams <- list(objective = "multiclass", metric = "accuracy")
valids <- list(test = dtest)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 5L
, valids = valids
, min_data = 1L
, learning_rate = 0.37
)
lgbparams <- list(objective = "multiclass", metric = "accuracy", num_class=3)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 5L
, valids = valids
, min_data = 1L
, learning_rate = 0.37
)
lgbparams <- list(objective = "multiclass", metric = "accuracy", num_class=3)
valids <- list(test = dtest)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 5L
, valids = valids
, min_data = 1L
, learning_rate = 0.37
)
lgbparams <- list(objective = "multiclass", metric = "multi_logloss", num_class=3)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 5L
, valids = valids
, min_data = 1L
, learning_rate = 0.37
)
lgbmodel <- lgb.train(
params = params
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, early_stopping_rounds = 20
)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, early_stopping_rounds = 20
)
lgbparams <- list(objective = "multiclass", metric = "multi_logloss", num_class=3)
valids <- list(test = dtest)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, early_stopping_rounds = 20
)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, early_stopping_rounds = 20
, categorical_feature = catnames
)
lgbparams <- list(objective = "multiclass", metric = "multi_logloss",num_class=3)
valids <- list(test = dtest)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, early_stopping_rounds = 20
, categorical_feature = catnames
)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, early_stopping_rounds = 20
, categorical_feature = catnames
)
dtrain <- lgb.Dataset(as.matrix(train_x),label = train_y,categorical_feature = catnames)
dtest <- lgb.Dataset(as.matrix(test_x),label = test_y,categorical_feature = catnames)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, early_stopping_rounds = 20
)
predsss <- predict(lgbmodel,as.matrix(train_x),reshape = T)
tahmin <- predsss %>% data.frame()
match(max(x),x)
myf <- function(x){
match(max(x),x)
}
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(predsss,as.factor(test_y))
confusionMatrix(as.factor(predsss),as.factor(test_y))
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
myf <- function(x){
match(max(x),x)
}
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.4
, early_stopping_rounds = 20
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
myf <- function(x){
match(max(x),x)
}
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.03769
, early_stopping_rounds = 20
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
myf <- function(x){
match(max(x),x)
}
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 2000
, min_data = 1L
, valids = valids
, learning_rate = 0.3769
, early_stopping_rounds = 20
)
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 2000
, min_data = 1L
, valids = valids
, learning_rate = 0.03769
, early_stopping_rounds = 20
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
predsss <- predict(lgbmodel,as.matrix(z),reshape = T)
predsss <- apply(tahmin,1,myf)-1
textpred <- ifelse(predsss==0,"functional",
ifelse(predsss==1,"functional needs repair","non functional"))
tahmin <- predsss %>% data.frame()
predsss <- predict(lgbmodel,as.matrix(z),reshape = T)
tahmin <- predsss %>% data.frame()
predsss <- apply(tahmin,1,myf)-1
textpred <- ifelse(predsss==0,"functional",
ifelse(predsss==1,"functional needs repair","non functional"))
SubmissionFormat$status_group <- textpred
write_csv(SubmissionFormat,"22EylLightGBMsub.csv")
library(readr)
write_csv(SubmissionFormat,"22EylLightGBMsub.csv")
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.7
, early_stopping_rounds = 20
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.7
, early_stopping_rounds = 50
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.1
, early_stopping_rounds = 50
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1000
, min_data = 1L
, valids = valids
, learning_rate = 0.001
, early_stopping_rounds = 50
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 500
, min_data = 1L
, valids = valids
, learning_rate = 1
, early_stopping_rounds = 50
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 500
, min_data = 1L
, valids = valids
, learning_rate = .01
, early_stopping_rounds = 50
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
myf <- function(x){
match(max(x),x)
}
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 1300
, min_data = 1L
, valids = valids
, learning_rate = .01
, early_stopping_rounds = 50
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
myf <- function(x){
match(max(x),x)
}
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
lgbmodel <- lgb.train(
params = lgbparams
, data = dtrain
, nrounds = 3000
, min_data = 1L
, valids = valids
, learning_rate = .01
, early_stopping_rounds = 50
)
predsss <- predict(lgbmodel,as.matrix(test_x),reshape = T)
tahmin <- predsss %>% data.frame()
predsss <- apply(tahmin,1,myf)-1
confusionMatrix(as.factor(predsss),as.factor(test_y))
predsss <- predict(lgbmodel,as.matrix(z),reshape = T)
tahmin <- predsss %>% data.frame()
predsss <- apply(tahmin,1,myf)-1
textpred <- ifelse(predsss==0,"functional",
ifelse(predsss==1,"functional needs repair","non functional"))
SubmissionFormat$status_group <- textpred
write_csv(SubmissionFormat,"22EylLightGBMsub.csv")
